using AppAgendamentos.Contracts.Repositories;
using AppAgendamentos.Enums;
using AppAgendamentos.Infrastructure;
using AppAgendamentos.Models;
using AppAgendamentos.Repository.Base;

using Microsoft.EntityFrameworkCore;

using System.Data;

namespace AppAgendamentos.Repository;
public class CompanyRepository : Repository<Company>, ICompanyRepository
{
    public CompanyRepository(ApplicationDbContext context) : base(context)
    {
    }
    public override async Task<Company> GetByIdAsync(int id, bool active = true)
    {
        var query = this.DbSet
            .Include(c => c.OpeningHours)
            .Include(c => c.ServicesOffered)
            .Where(c => c.Id == id);

        if (!active)
            query = query.IgnoreQueryFilters();

        return await query.FirstOrDefaultAsync();
    }
    public override Task SaveAsync(Company entity)
    {
        return base.SaveAsync(entity);
    }
    public override void BeforeUpdateChanges(Company entity)
    {
        var entry = this.DbSet.Entry(entity);
        entry.Property("ImagePrompt").IsModified = false;
        entry.Property("AutoGeneratedImage").IsModified = false;

        UpdateCollection(entity.ServicesOffered);
        UpdateCollection(entity.OpeningHours);
    }
    public override async Task<IEnumerable<Company>> GetAllAsync(bool active = true)
    {
        var query = this.DbSet
            .Include(c => c.OpeningHours)
            .Include(c => c.ServicesOffered).AsQueryable();

        if (!active)
            query = query.IgnoreQueryFilters();

        return await query.ToListAsync();
    }
    public async Task<IEnumerable<Company>> GetCompaniesByUserAsync(int userId)
    {
        return await this.DbSet
            .Include(c => c.Owners)
            .Where(c => c.Owners.Any(c => c.UserId == userId)).ToListAsync();
    }
}