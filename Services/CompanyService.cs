using AppAgendamentos.Contracts.HttpServices;
using AppAgendamentos.Contracts.Repositories;
using AppAgendamentos.Contracts.Repositories.Base;
using AppAgendamentos.Contracts.Services;
using AppAgendamentos.Enums;
using AppAgendamentos.Models;
using AppAgendamentos.Services.Base;
using AppAgendamentos.Services.HttpServices;

namespace AppAgendamentos.Services;
public class CompanyService : Service<Company>, ICompanyService
{
    private readonly ICompanyRepository _companyRepository;
    private readonly IOpenAIService _openAIService;
    private readonly IImageService _imageService;
    public CompanyService(IRepository<Company> repositoryBase, ICompanyRepository companyRepository, IOpenAIService openAIService, IImageService imageService) : base(repositoryBase)
    {
        _companyRepository = companyRepository;
        _openAIService = openAIService;
        _imageService = imageService;
    }
    public override void Validate(Company entity)
    {
        if (!entity.IsVirtual && (!entity.CityId.HasValue || entity.CityId == 0))
            throw new ArgumentException("City is required");
        if (String.IsNullOrWhiteSpace(entity.Description))
            throw new ArgumentException("Description is required");
        if (String.IsNullOrWhiteSpace(entity.Name))
            throw new ArgumentException("Name is required");
        if (String.IsNullOrWhiteSpace(entity.Email))
            throw new ArgumentException("Email is required");
        if (String.IsNullOrWhiteSpace(entity.ImageBase64) && String.IsNullOrWhiteSpace(entity.ImageUrl))
            throw new ArgumentException("Send a image or select the auto generated image option");
    }
    public override async Task SaveAsync(Company entity)
    {
        try
        {
            this.Validate(entity);

            if (entity.Id == 0)
            {
                foreach (var category in entity.SelectedCategoryIds)
                    entity.Categories.Add(new CompanyCategory() { CategoryId = (CategoryEnum)category });

                foreach (var serviceOffered in entity.SelectedServicesNames)
                    entity.ServicesOffered.Add(new CompanyServiceOffered() { Name = serviceOffered.ToString(), Price = 0 });
            }

            if (entity.AutoGeneratedImage)
                await GenerateImage(entity);

            entity.ImageUrl = await _imageService.UploadImage(entity.ImageBase64 ?? entity.ImageUrl);

            await _companyRepository.SaveAsync(entity);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }
    private async Task GenerateImage(Company entity)
    {

        string prompt = @$"Create a sophisticated and distinctive logo for {entity.Name}, an esteemed {entity.Description}. 
                The essence of the company should be encapsulated in the logo, embodying qualities such as innovation, elegance, 
                and {String.Join(", ", entity.Categories.Select(c => Enum.GetName(typeof(CategoryEnum), c.CategoryId)))}. 
                Infuse the design with a sense of timelessness and modernity, ensuring it stands out as a symbol of prestige and excellence for the brand. 
                Consider using elements that convey the company's commitment to quality and forward-thinking. 
                Strive for a logo that captivates attention, leaving a lasting impression on viewers.";

        entity.ImageUrl = await _openAIService.GetUrlNewImageAsync(prompt.Replace("\n", " ").Replace("  ", ""));
        entity.ImagePrompt = prompt;
    }
}