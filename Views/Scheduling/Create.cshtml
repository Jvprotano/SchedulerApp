@model Scheduler.ViewModels.SchedulingViewModel

@{
    ViewData["Title"] = "Book a Service";
}

<style>
    #row-actions {
        margin-top: 10px;
        justify-content: center;
    }
</style>

<form action="/Scheduling/Create" method="post">

    @Html.HiddenFor(c => c.CompanyId)
    @Html.HiddenFor(c => c.AvailableTimeSlots)

    <div class="company-information" style="text-align: center;">
        <img src="@Model.CompanyImage" height="200px"></img>

        <h1 style="text-align: center;">@Model.CompanyName</h1>
        <h3 style="text-align: center;">@Model.CompanyDescription</h3>
    </div>

    <div class="services">
        <div class="row">
            <div class="form-group col-md-3">
            </div>
            <div class="form-group col-md-3">
                @Html.Label("Serviço")
                @Html.DropDownListFor(m => m.ServiceSelected, Model.CompanyServices, htmlAttributes: new
                    {
                        @class =
                         "form-control"
                    })
            </div>
            <div class="form-group col-md-2">
                @Html.Label("Data do agendamento")
                @Html.TextBoxFor(m => m.ScheduledDate, htmlAttributes: new
                    {
                        @class =
                         "form-control",
                        @type =
                         "date"
                    })
            </div>
            <div class="form-group col-md-2">
                @Html.Label("Horários disponíveis")
                @Html.DropDownListFor(m => m.TimeSelected, Model.AvailableTimeSlots, htmlAttributes: new
                    {
                        @class =
                         "form-control"
                    })
            </div>
        </div>
    </div>
    </div>
    @if (!User.Identity.IsAuthenticated)
    {
        <div id="user-confirmation-container" style="display: none;">
            <div class="row">
                <div class="form-group col-md-3" style="margin-left: 16%;">
                    @Html.Label("Nome")
                    @Html.TextBoxFor(m => m.CustomerName, htmlAttributes: new { @class = "form-control" })
                </div>
                <div class="form-group col-md-3">
                    @Html.Label("Phone Number")
                    <input type="tel" maxlength="15" asp-for="Phone" onkeyup="handlePhone(event)" class="form-control"
                        placeholder="(99)99999999" />
                </div>
                <div class="form-group col-md-3" style="display: none;" id="divConfirmationCode">
                    @Html.Label("Code")
                    @Html.TextBoxFor(m => m.ConfirmationCode, htmlAttributes: new
                        {
                            @class = "form-control",
                            @maxlength =
                             "5"
                        })
                </div>
                <div class="form-group col-md-1" style="margin-top: 2.3%;">
                    <a class="btn btn-primary" id="sendCode">Send Code</a>
                </div>
                <div class="form-group col-md-1" style="margin-top: 2.3%;">
                    <a class="btn btn-danger" id="cancel">Cancel</a>
                </div>
            </div>
        </div>
    }


    <div class="row" id="row-actions">
        <a class="btn btn-primary" id="confirm" style="margin-bottom: 10px; display: none">Confirmar</a>
        <input class="btn btn-primary" type="submit" value="Book" id="submit"
            style="display: none; margin-bottom: 10px">
    </div>
</form>

@section Scripts {
    <script type="text/javascript">

        $(document).ready(function () {
            CheckIsAllFilled();
        });

        const handlePhone = (event) => {
            let input = event.target
            input.value = phoneMask(input.value)
        }

        const phoneMask = (value) => {
            if (!value) return ""
            value = value.replace(/\D/g, '')
            value = value.replace(/(\d{2})(\d)/, "($1) $2")
            value = value.replace(/(\d)(\d{4})$/, "$1-$2")
            return value
        }

        var userLogged = @User.Identity.IsAuthenticated.ToString().ToLower();
        console.log(userLogged);

        $("#confirm").on("click", function () {
            $("#confirm").hide();
            
            if (userLogged == false)
            {
                $("#user-confirmation-container").show(500);
            }
            else
            {
                $("#submit").show(500);
            }
        })
        $("#cancel").on("click", function () {
            $("#confirm").show(500);
            $("#user-confirmation-container").hide(500);
        })
        $("#sendCode").on("click", function () {
            $("#confirm").hide();
            $("#CustomerName").prop('readonly', true)
            $("#Phone").prop('readonly', true)
            $("#submit").show(500);
            $("#user-confirmation-container").show();
            $("#divConfirmationCode").show();
            $("#sendCode").hide();
            $("#cancel").hide();
        })

        $("#ScheduledDate").on("change", function () {
            GetAvailableTimes();
            CheckIsAllFilled();
        });
        $("#ServiceSelected").on("change", function () {
            GetAvailableTimes();
            CheckIsAllFilled();
        });
        $("#TimeSelected").on("change", function () {
            CheckIsAllFilled();
        });

        function GetAvailableTimes() {
            let serviceSelected = $("#ServiceSelected").val();
            let companyId = $("#CompanyId").val();
            let dateSelected = $("#ScheduledDate").val();

            if (serviceSelected && dateSelected) {
                $.ajax({
                    url: "/Scheduling/GetAvailableTimes",
                    type: 'POST',
                    data: { companyId: companyId, serviceSelected: serviceSelected, dateSelected: dateSelected },
                    success: function (data) {
                        updateAvailableTimes(data)
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            }
        }

        function updateAvailableTimes(data) {
            var selectList = $("#TimeSelected");

            selectList.html('');

            data.map(function (time, i) {
                const formatedTime = new Date(('June 11, 1999 ' + time + ' GMT-03:00')).toLocaleTimeString('en-US').replace(/:\d+ /, ' ');
                selectList.append($('<option></option>').val(time).html(formatedTime));
            })

            selectList.trigger('change');
        }

        function CheckIsAllFilled() {
            let serviceSel = $("#ServiceSelected").val();
            let dateSel = $("#ScheduledDate").val();
            let time = $("#TimeSelected").val();

            if (serviceSel && dateSel && time) {
                $("#confirm").show(500);
            } else {
                $("#confirm").hide(200);
            }
        }

    </script>
}